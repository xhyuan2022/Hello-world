//第1周 周一
第1章
面向对象程序设计
对象   类  封装 消息

第2章 
// 2-23
C++是C的plus版本
//讲完数据类型
//讲完cout<<输出
//end of 2-23


//3-2
复习了数据类型
了解了输入输出
了解了加入类定义后的代码结构--用圆做实例（封装了半径和面积计算函数）

//end of 3-2

//3-9
讲到了内联，例子还没有讲
int  x;
char y;
int ar[3];
char *str=new  char[20];  
int *p=new int(3);  

 //  int *p=(int *)malloc(4);// void *
delete p;  //free(p);   //?
p=&x;


Student c_1;  //name,sid

void Cinput(char *name,int sid){
this->sid=sid;
this->name=new char[20];
strcpy(this->name,name);
}

c_1.Cinput("老王",1853101);
cin>>str>>x>>y>>*p;

cout,cerr,clog
cout<<endl;
cout<<"hello"<<c_1.name<<c_1<<sid<<endl;
cout<<hex<<16<<oct<<dec<<bin<<endl;

//3-16

1）默认参数
2）引用
3）重载

//3-23
结构变量，
类的对象

4）类的定义
面向对象：
   1）抽象  找出涉及的所有对象，划分它们所属的类别
  在类别中，把对象共同的数据方面和功能方面分析出来，形成一张类的清单（UML）。

   2） 封装
将类的清单，用一门支持面向对象编程的语言，翻译成一个个自定义的类。
   
类：
    是结构在成员方法和权限这两个方面进行了扩展的版本。



自定义圆的数据类型:
     半径
    算面积

class  Circle{
//数据成员的说明
//成员函数的说明
};  



//----------3月29
类定义
    数据成员：
          基本数据，引用型数据
    成员方法：
         构造方法:  数据初始化的任务  声明，定义，参数初始化列表
         setter / getter：

        析构方法 ？
        针对计算任务的全部业务方法---算法  （add, subtract?,multiply? dividie?）

对象的创建和使用：        
        单对象
        对象数组？
       对象指针？
       对象引用？
           
//
//end of 3月29， 问号的是没来得及讲的。只讲了复数类


//4月6号
构造方法的参数初始化表达式列表
学生类：析构还没讲完，只讲了构造的重载，指针型数据成员的初始化方法
// char *name;
//const int cid;//常数据成员
// A a;
//  int   x(5)
void Complex::Complex(float  rex, float imgx,int cidx):re(rex),img(imgx),cid(cidx),a(1,2,3){
    name=new char[20];
    strcpy(name,"noname");
}

int x, *pt=&x;
pt=new int;
delete pt;
pt=new int[10];
delete pt;


Complex c0(1f,2f);
case   **:
   

构造方法的重载  

Complex()  {

}




析构方法:
   用于清空对象的空间
Complex::～Complex( ){
    delete [ ]name;
}




对象数组   4月18
对象指针 4月18
this 指针  ok 
对象的赋值（默认的=运算符） 4月18
对象的复制 （默认拷贝构造函数，自定义拷贝构造函数）ok 4月13
静态成员 ok 4月13
常成员   ok 4月13 
   常数据成员初始化后不可修改
   常成员函数  
       能读所有数据，能修改static 数据和调用const与static函数，
       不能修改 对象级的任何数据，不能调用任何普通方法


函数，类，


友员 ?4月18  

组合类（聚集类）?

4月20,
    车是由轮子、门、发动机组成，用组合轮子、门、发动机
    
    车是一种交通工具，用继承交通工具

学生由出生日期组成，用组合？


4月22号
学生 is-a  公民(Person)，用继承。
A ：      x,y
 B： s,t
A继承B

4月25
讲完了公有继承：
   对公有成员和保护成员不打折扣，对私有转成第4权限。

//私有继承
//保护继承
//派生类的构造和析构
//          定义方式，执行顺序  
//4.4~4.7 用公民和学生类来讲，没讲完，4.26再讲。

4月26号
   讲完了：派生类的构造和析构的定义方法，派生类和基类同名函数的调用方法 。对应示例4.5～4.7

4月27号：
   公有基类对象成员的参数初始化顺序 4.8～4.10  ，讲完了
   对父类成员进行访问声明 4.11～4.12，
       继承关系：
Complex  Date Time  Person  Student  Employee, UStudent , E_Student, List, Queue, Stack, ostream , istream, cout, cin, fstream

   多重继承 :  4月29号没讲完  5月2号讲完

虚继承，解决多层继承关系中，间接祖先中数据，到第3层派生类中产生的数据二义性问题。


	[Error] reference to 'cid' is ambiguous


同名虚函数多态

                                        Perosn :cid
 
      Student: virtual public Person        Employee:virtual public Person

                     Estudent:   public Student,    public Employee

抽象类  多态  Shape2D   Triangle  Circle   Rectangle 



B 是 A的子类

B b;
A a(b);
A &a1=b;
A *pt=&b;
//子对象，对象应用，对象指针，为对应的父类。。。赋值，叫赋值兼容

a is a A;
b is a B;//ok
b is a A;  //ok
a is a B;//no

5月6号：
    父类带有：数据，构造方法，以及 抽象方法
    子类实现：抽象方法
    未讲完，有语法错误

5.9 
1）纯抽象类      读代码：5.30～5.31
2）运算符重载，数据类型标识符重载

队列：先进先出
栈：是先进后出 5.9 还没有读完

5.10 队列与栈讲完
       复数类的operator+重载为成员讲完了。
      1+1*2.3f;

    Complex c1(1,2),c2(3,4),c3;
     c1+c2*3;  //


i++;
++i;
c1++;
++c1;

    int add(int x,int y);
    int add(int x,int y, int z);

5.11： 重载运算符为成员和友员的区别，尽量重载为成员，有多个类的形参作为操作数时，重载为友员
             重载运算符时应遵守的规则
   - 书上重载为友员，课堂代码重载为成员，运算符讲完了,还要补充 (对-x=c不支持，需要重载时如何写)
-x;//1) 不修改x,

int x=7;
-x;
-x=5;

int x=7,y=5;
++x;  //x=x+1


Complex & operator++(){
this->re++;
this->img++;
return  *this;
}


x1+x2

还没讲:
   ++ --(返回本对象）
   =    （返回本对象）?5月13号没讲完

   []  （返回本对象数组中的某个元素时，用）?5月13号没讲完
  ( )   （本对象创建后，本对象作为函数名，调用一个函数时，用）?5月13号没讲完

   <<  >>  ? 5月13号没讲完, 16号讲完
 数据类型转换  ? 5月13号没讲完
#include <cstring>
using namespace std;
class Student{
private:
   int sid;
   char *name;
   float sc[3];
public:
    Student( ):sid(0){
     name=new char[32];
     strcpy(name,"no name");
     sc[0]=sc[1]=sc[2]=0;
}
   Student(int sidx, char *namex,float scx[]):sid(sidx){
      name=new char[strlen(namex)+1];
      strcpy(name,namex);
     int i=0;
     for(;  i<3;i++) sc[i]=scx[i];
}
 Student(Student &s):sid(s.sid){
          name=new char[strlen(s.name)+1];
      strcpy(name,s.name);
     int i=0;
     for(;  i<3;i++) sc[i]=s.sc[i];
} 

float operator[] (int index){
   return sc[index];
}

Student & operator( ) ( int sidx, char *namex,float scx[] ){
   this->sid=sidx;
   delete []this->name;
   this->name=new char[strlen(namex)+1];
   strcpy(this->name,namex);
   for(;  i<3;i++) this->sc[i]=scx[i];
   return *this;
}
  Student &operator() (int sid){

}

  Student &operator() (char *name){

}
s1=s2;//重载运算符后，用的深层复制

Student & operator=(  Student &s){
this->sid=s.sid;
delete []this->name;
   this->name=new char[strlen(s.name)+1];
   strcpy(this->name,s.name);
   for(;  i<3;i++) this->sc[i]=s.sc[i];
   return *this;
}


friend  ostream & operator<<(ostream &os, const Student &s);
friend  istream & operator>>(istream &is,  Student &s);


};

Student s1,s2;
s1=s2;
int y=2,z=3,&ref=x=y=z=6;


ostream & operator<<(ostream &os, const Student &s){
    os<<s.sid<<"\t"<<s.name<<"\t"<<s.sc[0]<<endl;
}
istream & operator>>(istream &is,  Student &s){
cout<<"tishi"<<endl;
is>>s.sid;
//cin>>s.name;
delete  []s.name;
char str[80];
cin>>str;
s.name=new char[strlen(str)+1];
strcpy(s.name,str);
int i=0;
for(; i<3;i++)cin>>s.sc[i];
}

float sc[]={1.1,2.2,3.3},sc1[]={2.5,3.0,3.7};

//Student s(1,"yang",sc); 
cout<<s[1]<<endl;
cout<<s(2,"zhang",sc1)<<endl;
//cout  cerr clog
//cin 
Complex c3(1,2),c1;
c3+c1;

cout<<c3<<endl;
cout<<"hello"<<endl;
cerr<<c3<<c1;
clog<<c3;
int x;
cin>>x;

cin>>c3>>x;


class Student{

friend  ostream & operator<<(ostream &os, const Student &s);
friend  istream & operator>>(istream &is,  Student &s);
};




//friend   ostream &   operator<<(ostream &os, const Complex &c);  

ostream &   operator<<( ostream &os, const Complex &c){
       os<<c.re<<"+"<<c.img<<"i"<<endl;
      return os;
}



//7.8
//friend   istream &   operator>>( istream &is, Complex &c);//7.9

 istream &   operator>>( istream &is, Complex  &c){
      cout<<"请输入复数的实部和虚部"<<endl;
     is>>c.re>>c.img;
    return is;
}










	float operator()(int x){
			this->sid=x;
		}
		Student operator()(int sid,char *name,float ar[]){
			this->sid=sid;
			this->name=new char[strlen(name+1)];
			strcpy(this->name,name);
			int i=0;
			for(;i<3;i++)this->sc[i]=ar[i];	
			return *this;
		}
		



              
int x=7,y;
cout<<x    <<x +y<<endl;
        cout<<x+y<<endl;  //     




                          cout<<endl;
//从右到左计算各个输出表达式；
//计算完成后，从左到右输出




Complex Complex::operator+(const Complex &c){//尽量选形式1：重载为成员运算符
Complex c3;
c3.re=this->re+c.re;
c3.img=this->img+c.img;
return c3;
}

cout<<c1;
int x=1,y=-x;
Complex c3(1,2);//1+2i
-c3// -1-2i;


//iostream.h

ostream & operator<<(ostream &os, Complex &c); 


Complex   operator+(const Complex &c1,const Complex &c2){ //少选形式2：重载为友员运算符
Complex c3;
c3.re=c1.re +c2.re;
}




class Cls{
private:
   int data;
//...
}

   class  X:public Cls{ //...
};

   class Y:public Cls{ //...
 };
    
     X (public)   Y(private)
                     Z
class Z:  publc X,  private Y{
     
};

 和多层继承，
X
Y
Z




 4.13～4.14，
  虚继承 4.15～4.18，
用虚继承中包含虚函数的方法，说清楚了多态
 本课程最重要的四句话
多态是面向对象的终极目标，它的必要条件是存在继承关系，实现方法是：

1） 继承关系支持子类向父类的赋值兼容；
2）在继承关系树中，尽量在最老的类中，声明同名的虚函数；
3）在任务函数的形参中，声明最早出现同名虚函数的类的对象引用或指针。

// 第8章 原有程序读懂，运行，写成报告（运行结果的截图）（70分）。
//评优和良的同学，要增加功能：二进制文件的写和读（20），异常处理（10）
//   
//ppt 4套题  ？
//实验报告 5份
//泛雅练习，5份  ？






  
   
//类
//继承
//多态：重点  动态多态，难点：静态多态中的运算符重载

5.1～5.3 ：
 重载实现的 静态多态中，运算符重载


 继承关系和虚函数实现，是程序运行期间，才能确定调用虚函数中的哪一个版本的函数，称为运行时多态，动态多态

继承关系中，构造方法不要写成虚的。
析构方法，尽量为虚。
class Shape2D;

class Point{
....
friend class Shape2D;
...
};

const float PI=3.1415926f;

class Shape2D{
private:
   Point p1;  //质心坐标
   Shape2D(const Point &p1);
   virtual ~Shape2D( ){
}
   virtual  float area()=0;
   virtual   float perimeter()=0;

}

class Circle:public Shape2D{
private:
   float r;
   Circle (const Point &p1,float r);
   float area( ){
   return PI*r*r;
}
....
};


Shape2D *pt=new Circle(p1,5);
cout<<pt->area()<<endl;




B *pt=new D();
delete pt;//析构不为虚的话，此时调用的是B的析构


pt->fun2();

      person
 学生     教师 




void Student ::disp(){
cout<<sid<<'\t'<<name<<'\t';
cout<<d1.y<<d1.m<<d1.d; //
}

void testFriend(const Student &s,const Date1 &day){
   cout<<s.sid<<s.d1.d<<endl;
   cout<<day.d<<endl;
}


A是B的友员，B是C的友员  A? C





Complex  
幅长
'+absComplex():float

1+2i+3-4i
4-2i





Cirlce 
Complex 

Date  Time 

Person Student GStudent //数据库原理  数据结构
非数值型


Point Triangle Rectangle 
Stock

复数，
1+2i,
3-4i;
+  -   *  /   abscomplex 














引用变量
设计

int  x, *pt=&x, &y=x, z=x;  //
//cout<<&y<<&x<<endl;  //
 
void swap(float &x1,float &y1);  //不创建x1,y1, 别名

//swap( x,z);  // float &y1=z, &x1=x1;


#include <iostream>
using namespace std;
//
inline  int test1(int x,int y);

float distance(float x1,float y1, float x2=0.0f, float y2=0.0f);
void  swap(float*x,float *y); // 普通值变量，是单向传递   x=x1, y=y1;
void swap(float &x,float &y);
 //指针和引用参数，是双向传递
int main(){
float x1=1.0f,y1=1.0f, x2=2.0f,y2=2.0f;  //变量地址一旦声明好，就定死了。
swap(&x1,&x2);
//swap(81124,81128); 
cout<<distance(x1,y1,0)<<endl;
cout<<x1<<'\t'<<x2<<endl;
}

inline  int test1(int x,int y){
   return x+y;
}

float distance(float x1,float y1, float x2, float y2){
   return 1/2;
}

void swap(float* x,float * y){   //x本身的地址也定死，
float z=*x;
*x=*y;
*y=*z;
}














//3-16


作业3 布置了 
用GetTickCount()查内联函数和普通函数的效率，
默认参数求距离，判段两圆之间的空间关系，基于类来完成
引用实现交换的函数




作业2，//布置了，不上学习通
1) 分别用 :: 和取地址函数的方法，在声明了与全局变量同名的局部变量的函数体中，访问全局变量pi.
2) 查询和学习float 类型的二进制计算和存储方法，了解什么是下溢出
3）深入了解C和C++中输入缓存的概念
4）预处理还是预编译，哪个合适



作业1：
编程练习
编写四个C++函数，分别处理以下几个问题
1）输出 *组成的n*n的菱形
2）输出99乘法表
3）解决百钱百鸡的问题
4)   产生两个正的随机数 m和n, 并生成二者之间的随机数x，读入键盘输入来猜x, 猜中输出" 恭喜"，没猜中继续再接受输入猜数，直到猜中，或输入一个负数结束。
调用各个函数，检查执行结果。

作业上交到泛雅平台。




